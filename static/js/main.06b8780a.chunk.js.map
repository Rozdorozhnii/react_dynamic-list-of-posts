{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/users.ts","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onSetSelectedPost","selectedPostId","className","map","post","userId","title","id","onClick","type","NewCommentForm","onAddComment","initialComment","postId","name","email","body","useState","comment","setComment","handleInputChange","event","target","value","onSubmit","preventDefault","method","onChange","placeholder","BASE_URL","getUserPosts","a","url","fetch","response","json","getPostDetails","getPostComments","removeComment","commentId","addComment","newComment","headers","JSON","stringify","getAllUser","Loader","PostDetails","setPost","isPostLoading","setIsPostLoading","comments","setComments","isCommentsShow","toggleIsCommentsShow","loadPostById","postsFromServer","Error","useEffect","loadCommentsByPostId","commentsFromServer","handleRemoveCommentById","handleAddComment","length","App","setPosts","arePostLoading","setArePostLoading","users","setUsers","areUserLoading","setAreUserLoading","selectedUserId","setSelectedUserId","setSelectedPostId","loadUserPosts","Number","loadUsers","usersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06b8780a.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  onSetSelectedPost: (newSelectedPostId: number | null) => void;\n  selectedPostId: number | null;\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, onSetSelectedPost, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {\n            selectedPostId === post.id\n              ? (\n                <button\n                  onClick={() => onSetSelectedPost(null)}\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  onClick={() => onSetSelectedPost(post.id)}\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                >\n                  Open\n                </button>\n              )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  onAddComment: (newComment: NewComment) => void;\n  selectedPostId: number;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment, selectedPostId }) => {\n  const initialComment = {\n    postId: selectedPostId,\n    name: '',\n    email: '',\n    body: '',\n  };\n\n  const [comment, setComment] = useState<NewComment>(initialComment);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setComment({\n      ...comment,\n      [event.target.name]: event.target.value,\n\n    });\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAddComment(comment);\n    setComment(initialComment);\n  };\n\n  return (\n    <form\n      onSubmit={handleFormSubmit}\n      className=\"NewCommentForm\"\n      method=\"post\"\n    >\n      <div className=\"form-field\">\n        <input\n          onChange={handleInputChange}\n          value={comment.name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          onChange={handleInputChange}\n          value={comment.email}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          onChange={handleInputChange}\n          value={comment.body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => {\n  let url = `${BASE_URL}/posts`;\n\n  if (userId > 0) {\n    url += `?userId=${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number): Promise<Post> => {\n  const url = `${BASE_URL}/posts/${postId}`;\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPostComments = async (postId: number): Promise<PostComment[]> => {\n  const url = `${BASE_URL}/comments?postId=${postId}`;\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const removeComment = async (commentId: number) => {\n  const url = `${BASE_URL}/comments/${commentId}`;\n\n  const response = await fetch(url, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (newComment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getAllUser = async (): Promise<User[]> => {\n  const url = `${BASE_URL}/users`;\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  getPostDetails,\n  getPostComments,\n  removeComment,\n  addComment,\n} from '../../api';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [comments, setComments] = useState<PostComment[]>([]);\n  const [isCommentsShow, toggleIsCommentsShow] = useState(true);\n\n  const loadPostById = async (postId: number) => {\n    try {\n      setIsPostLoading(true);\n      const postsFromServer = await getPostDetails(postId);\n\n      setPost(postsFromServer);\n    } catch (error) {\n      throw new Error(`${error}`);\n    } finally {\n      setIsPostLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPostById(selectedPostId);\n  }, [selectedPostId]);\n\n  const loadCommentsByPostId = async (postId: number) => {\n    const commentsFromServer = await getPostComments(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    loadCommentsByPostId(selectedPostId);\n  }, [selectedPostId]);\n\n  const handleRemoveCommentById = async (commentId: number, postId: number) => {\n    await removeComment(commentId);\n\n    const commentsFromServer = await getPostComments(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  const handleAddComment = async (newComment: NewComment) => {\n    await addComment(newComment);\n\n    const commentsFromServer = await getPostComments(newComment.postId);\n\n    setComments(commentsFromServer);\n  };\n\n  return (\n    (\n      <div className=\"PostDetails\">\n        {isPostLoading ? <Loader />\n          : (\n            <>\n              <h2>\n                Post details:\n                {' '}\n                {post?.title}\n              </h2>\n\n              <section className=\"PostDetails__post\">\n                <p>{post?.title}</p>\n                <p>{post?.body}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                {isCommentsShow && comments.length > 0\n                  ? (\n                    <button\n                      onClick={() => toggleIsCommentsShow(false)}\n                      type=\"button\"\n                      className=\"button\"\n                    >\n                      {`Hide ${comments.length} comments`}\n                    </button>\n                  )\n                  : (\n                    <button\n                      onClick={() => toggleIsCommentsShow(true)}\n                      type=\"button\"\n                      className=\"button\"\n                    >\n                      {comments.length > 0 ? `Show ${comments.length} comments` : 'No comments'}\n                    </button>\n                  )}\n\n                { isCommentsShow && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li key={comment.id} className=\"PostDetails__list-item\">\n                        <button\n                          onClick={() => handleRemoveCommentById(comment.id, comment.postId)}\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm onAddComment={handleAddComment} selectedPostId={selectedPostId} />\n                </div>\n              </section>\n            </>\n          )}\n      </div>\n    )\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getAllUser } from './api';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [arePostLoading, setArePostLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [areUserLoading, setAreUserLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const loadUserPosts = async (userId: string) => {\n    try {\n      setArePostLoading(true);\n      const postsFromServer = await getUserPosts(Number(userId));\n\n      setPosts(postsFromServer);\n    } catch (error) {\n      throw new Error(`${error}`);\n    } finally {\n      setArePostLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUserPosts(selectedUserId);\n  }, [selectedUserId]);\n\n  const loadUsers = async () => {\n    try {\n      setAreUserLoading(true);\n      const usersFromServer = await getAllUser();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error(`${error}`);\n    } finally {\n      setAreUserLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {areUserLoading\n          ? (<Loader />)\n          : (\n            <label htmlFor=\"select-user\">\n              Select a user: &nbsp;\n              <select\n                value={selectedUserId}\n                onChange={event => setSelectedUserId(event.target.value)}\n                className=\"App__user-selector\"\n                id=\"select-user\"\n              >\n                <option value=\"\">All users</option>\n                {users.map(user => (\n                  <option\n                    key={user.id}\n                    value={user.id}\n                  >\n                    {user.name}\n                  </option>\n                ))}\n              </select>\n            </label>\n          )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {arePostLoading ? <Loader /> : (\n            <PostsList\n              posts={posts}\n              onSetSelectedPost={setSelectedPostId}\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}